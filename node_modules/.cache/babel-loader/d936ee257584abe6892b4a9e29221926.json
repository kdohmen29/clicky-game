{"ast":null,"code":"import _toConsumableArray from \"/Users/kylestyle/Documents/clicky-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/kylestyle/Documents/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kylestyle/Documents/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kylestyle/Documents/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kylestyle/Documents/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kylestyle/Documents/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kylestyle/Documents/clicky-game/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TestComponent from './components/TestComonent/TestComponent.js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      score: 0,\n      highScore: 0,\n      message: 'Click any image to begin',\n      images: images,\n      clickedArray: [] //lifecyle method\n\n    };\n\n    _this.handleImageClick = function () {\n      var currentId = event.target.alt;\n      console.log(currentId);\n\n      var shuffledArray = _this.shuffleArray(images);\n\n      _this.setState({\n        images: shuffledArray\n      }); // If image has already been clicked set this.state.score = 0, empty clickedArray\n\n\n      if (_this.state.clickedArray.includes(currentId)) {\n        _this.setState({\n          score: 0,\n          clickedArray: [],\n          message: \"Incorrect!! GAME OVER! Click another image to play again!\"\n        }); // Else\n\n      } else {\n        _this.setState({\n          score: _this.state.score + 1,\n          // clickedArray: this.state.clickedArray.concat([images.id]),\n          clickedArray: [].concat(_toConsumableArray(_this.state.clickedArray), [currentId]),\n          message: \"Correct!!\"\n        });\n      } // set topscore = score if score>topscore.\n\n\n      if (_this.state.score > _this.state.topScore) {\n        _this.setState({\n          topScore: _this.state.score\n        });\n      }\n    };\n\n    _this.shuffleArray = function (a) {\n      for (var i = a.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var _ref = [a[j], a[i]];\n        a[i] = _ref[0];\n        a[j] = _ref[1];\n      }\n\n      return a;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('componentDidMount');\n    } //lifecyle method\n\n  }, {\n    key: \"myMethod\",\n    value: function myMethod() {\n      console.log('componentWillMount');\n    }\n  }, {\n    key: \"render\",\n    //lifecyle method\n    value: function render() {\n      var _this2 = this;\n\n      var displayImages = this.state.images.map(function (eachItem) {\n        return React.createElement(\"img\", {\n          alt: eachItem.id,\n          key: eachItem.id,\n          src: eachItem.path,\n          onClick: _this2.handleImageClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Clicky Game\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Score: \", this.state.score, \" | High Score: \", this.state.highScore)), React.createElement(TestComponent, {\n        handleImageClick: this.handleImageClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/kylestyle/Documents/clicky-game/src/App.js"],"names":["React","Component","TestComponent","App","state","score","highScore","message","images","clickedArray","handleImageClick","currentId","event","target","alt","console","log","shuffledArray","shuffleArray","setState","includes","topScore","a","i","length","j","Math","floor","random","displayImages","map","eachItem","id","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport TestComponent from './components/TestComonent/TestComponent.js'\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    highScore: 0,\n    message: 'Click any image to begin',\n    images: images,\n    clickedArray: []\n\n  }\n\n\n  //lifecyle method\n  componentDidMount(){\n    console.log('componentDidMount');\n  }\n\n  //lifecyle method\n  myMethod(){\n    console.log('componentWillMount');\n  }\n\n\n  handleImageClick = () => {\n    let currentId =event.target.alt;\n    console.log(currentId);\n    const shuffledArray = this.shuffleArray(images);\n    this.setState({ images: shuffledArray });\n    \n   // If image has already been clicked set this.state.score = 0, empty clickedArray\n   if (this.state.clickedArray.includes(currentId)) {\n    this.setState({\n      score: 0,\n      clickedArray: [],\n      message: \"Incorrect!! GAME OVER! Click another image to play again!\"\n    });\n    // Else\n  } else {\n    this.setState({\n      score: this.state.score + 1,\n      // clickedArray: this.state.clickedArray.concat([images.id]),\n      clickedArray: [...this.state.clickedArray, currentId],\n      message: \"Correct!!\"\n    });\n  }\n  // set topscore = score if score>topscore.\n  if (this.state.score > this.state.topScore) {\n    this.setState({ topScore: this.state.score });\n  }\n};\n\n // Shuffle function\n shuffleArray = a => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n  \n\n  //lifecyle method\n  \n  render() {\n    let displayImages = this.state.images.map(eachItem => (\n      <img\n        alt={eachItem.id}\n        key={eachItem.id}\n        src={eachItem.path}\n        onClick={this.handleImageClick}\n      />\n    ));\n    return (\n      <div className=\"App\">\n\n\n        <React.Fragment>\n        <div className=\"Header\">\n          <div>Clicky Game</div>\n          <div>{this.state.message}</div>\n          <div>Score: {this.state.score} | High Score: {this.state.highScore}</div>\n\n        </div>\n        <TestComponent \n        \n        handleImageClick={this.handleImageClick}/>\n        </React.Fragment>\n\n\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}